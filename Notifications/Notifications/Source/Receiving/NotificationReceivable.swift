//
//  NotificationController.swift
//  Notifications
//
//  Created by Ben RIAZY on 14/02/2018.
//  Copyright Â© 2018 HSBC. All rights reserved.
//

import Foundation
import UIKit
import UserNotifications

// MARK: Protocol declaration

/**
 A Type which is to be defined by any feature that desires to integrate with the PN Framework and gain the ability to receive Push Notifications
 
 a sample implementation of the Protocol could look like the following snipped
 
 ```
 class MobileChatMessage: Decodable {
    var message: String
 }
 
 class MobileChatReceiver: NotificationReceivable {
 
    func didReceive(apnsToken: Data) {
        // Implement storing the token for later use
    }
 
    func associateToken() {
        // The user has gained the necessary authentication level to start receiving notifications
    }
 
    func disassociateToken() {
        // The user has lost the necessary authentication level to receive notifications
    }
 
    func didReceive(_ payload: Payload) {
        // The notification payload that has been received
    }
 
 }
 ```
 
 ### Extending the identifier
 
 The identifier is extended with a default implementation of the String describing the static class. The expected behavior when not overriding `identifier` is defined in the following code snippet
 
 ```
 let mcReceiver = MobileChatReceiver
 mcReceiver.identifier // -> "MobileChatReceiver"
 ```
 
 */
public protocol NotificationReceivable {
    
    /// Uniquely identify the type of the Receivable. The default for this is a String describing the implemented class
    var identifier: String { get }
    
    /// The function that needs to be defined so that the Controller can identify incoming notification payloads
    ///
    /// - Parameter userInfo: the payload that was received by the notification manager
    /// - Returns: An instance of the defined type based on the parameters. Nil if the feature does not want to handle or is not the designated receiver of this payload
    func decode(_ userInfo: [AnyHashable: Any]) -> Decodable?
    
    /// This is the Token that will enabled any Feature requiring push notification capabilities for further
    ///
    /// This method will be called when a) token data has already been gathered after the feature associating with the PN Framework or b) the feature has already associated with the Framework and the token has been received
    ///
    /// - Parameter apnsToken: the Data object that has been generated by the iOS System
    func didReceive(apnsToken: Data)
    
    /// After the user has successfully authenticated and we verified that a certain level of authentication is given, the user can be associated with the token
    func associateToken()
    
    /// If the user has lost the necessary authentication level for receiving Push notifications, the association has to be cancelled when this method is called
    func disassociateToken()
    
    /// Tells the feature that a remote notification for this feature arrived that indicates there is data to be fetched.
    ///
    /// Mimics [application(_:didReceiveRemoteNotification:fetchCompletionHandler:)]( https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623013-application)
    ///
    /// - Parameters:
    ///   - payload: The parsed payload object depending on the type specified in the associatedType
    ///   - completionHandler: The closure to execute when the download operation is complete. Must be called as soon as possible.
    func didReceiveNotification(_ payload: Decodable, fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)
    
    /// Called when a notification for this feature is delivered to a foreground app.
    ///
    /// Mimics [userNotificationCenter(_:willPresent:withCompletionHandler:)](https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate/1649518-usernotificationcenter)
    ///
    /// - Parameters:
    ///   - payload: The parsed payload object depending on the type specified in the associatedType
    ///   - completion: The closure to execute with the presentation option for the notification. Must be called at some point
    func willPresentNotification(_ payload: Decodable, presentationOptions completion: ((UNNotificationPresentationOptions) -> Void)?)
}

public extension NotificationReceivable {
    
    var identifier: String {
        return String(describing: type(of: self))
    }
    
}
